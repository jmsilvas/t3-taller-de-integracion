{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","flights","map","flight","Polyline","pathOptions","color","positions","origin","destination","Popup","code","Marker","position","App","useState","setFlights","setPosition","getRandomColor","i","Math","floor","random","useEffect","socket","io","path","emit","on","payload","index","length","Container","className","Row","Col","md","sm","airline","plane","seats","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAIe,SAASA,EAAIC,GAGxB,OACI,8BACI,qBAAKC,GAAG,QAAR,SACI,eAACC,EAAA,EAAD,CAAcC,OAAQ,EAAE,QAAS,OAAQC,KAAM,EAAGC,iBAAiB,EAAnE,UACI,cAACC,EAAA,EAAD,CACAC,YAAY,yEACZC,IAAI,uDAEHR,EAAMS,QAAQC,KAAI,SAACC,GAAD,OACf,qCAaJ,cAACC,EAAA,EAAD,CAAUC,YAAa,CAACC,MAAOH,EAAOG,OAAQC,UAAW,CAACJ,EAAOK,OAAQL,EAAOM,aAAhF,SACI,cAACC,EAAA,EAAD,UAAQP,EAAOQ,SAElBnB,EAAMe,UAAUJ,EAAOQ,OAAU,cAACC,EAAA,EAAD,CAAgCC,SAAU,CAACrB,EAAMe,UAAUJ,EAAOQ,MAAM,GAAGnB,EAAMe,UAAUJ,EAAOQ,MAAM,IAAxG,SAC9B,eAACD,EAAA,EAAD,oCAC2BP,EAAOQ,KAC7BnB,EAAMe,UAAUJ,EAAOQ,MAAOnB,EAAMe,UAAUJ,EAAOQ,MAAME,SAAU,oBAH/BV,EAAOQ,KAAK,oB,oCCoChEG,MA7Df,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNd,EADM,KACGe,EADH,OAEoBD,mBAAS,IAF7B,mBAENR,EAFM,KAEKU,EAFL,KAIX,SAASC,IAGL,IAFA,IACIZ,EAAQ,IACHa,EAAI,EAAGA,EAAI,EAAGA,IACrBb,GAHY,mBAGKc,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOhB,EAyBb,OAtBAiB,qBAAU,WAGR,IAAMC,EAASC,aAAG,wDAAyD,CACzEC,KAAM,aACNF,EAAOG,KAAK,WAIZH,EAAOI,GAAG,WAAW,SAACC,GACpB,IAAK,IAAIC,EAAQ,EAAGA,EAAQD,EAAQE,OAAQD,IAC1CD,EAAQC,GAAR,MAAwBZ,IAG1BF,EAAWa,MAEbL,EAAOI,GAAG,YAAY,SAACC,GACrBtB,EAAUsB,EAAQlB,MAAQkB,EAAQhB,SAClCI,EAAYV,QAEd,CAACN,EAASM,IAGZ,eAACyB,EAAA,EAAD,CAAWC,UAAU,iBAArB,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,SACE,cAAC9C,EAAD,CAAKU,QAASA,EAASM,UAAWA,MAEpC,cAAC4B,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,qBAEF,eAACH,EAAA,EAAD,CAAKE,GAAG,KAAR,UACI,sCACCnC,EAAQ8B,OAAS9B,EAAQC,KAAI,SAACC,GAAD,OAC9B,eAACgC,EAAA,EAAD,WACE,8BAAMhC,EAAOQ,OACb,8BAAMR,EAAOmC,UAGb,8BAAMnC,EAAOoC,QACb,8BAAMpC,EAAOqC,UANLrC,EAAOQ,SAQN,UCjDN8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d063d33a.chunk.js","sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline} from 'react-leaflet';\n// import \"leaflet/dist/leaflet.css\"\n\nexport default function Map(props) {\n    \n  \n    return (\n        <div>\n            <div id=\"mapid\">\n                <MapContainer center={[-38.505, -65.09]} zoom={5} scrollWheelZoom={false}>\n                    <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {props.flights.map((flight) => ( \n                        <>\n                    {/* <Marker key={flight.code+\"ori\"} position={[flight.origin[0], flight.origin[1]]}>\n                        <Popup>\n                            Origen Vuelo {flight.code}\n                            {props.positions[flight.code]? props.positions[flight.code]: \"no hay avance\"}\n                        </Popup>\n                    </Marker> \n                    <Marker key={flight.code+\"dest\"} position={[flight.destination[0], flight.destination[1]]}>\n                        <Popup>\n                            Destino Vuelo {flight.code}\n                            {props.positions[flight.code]? props.positions[flight.code].position: \"no hay avance\"}\n                        </Popup>\n                    </Marker>  */}\n                    <Polyline pathOptions={{color: flight.color}} positions={[flight.origin, flight.destination]}>\n                        <Popup>{flight.code}</Popup>\n                    </Polyline>\n                    {props.positions[flight.code]&&   <Marker key={flight.code+\"loc\"} position={[props.positions[flight.code][0],props.positions[flight.code][1]]}>\n                        <Popup>\n                            Posicion actual Vuelo {flight.code}\n                            {props.positions[flight.code]? props.positions[flight.code].position: \"no hay avance\"}\n                        </Popup>\n                    </Marker> }\n                    </>))}\n                   \n                </MapContainer>\n            </div>\n        </div>\n    )\n}\n","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Map from './components/Map';\nimport {Container, Row, Col} from 'reactstrap';\nimport { io } from \"socket.io-client\";\n\n\nfunction App() {\n  const [flights, setFlights] = useState([]);\n  const [positions, setPosition] = useState({});\n\n    function getRandomColor() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n      }\n\n  useEffect(() => {\n    \n\n    const socket = io(\"wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl\", {\n      path: \"/flights\"});\n      socket.emit(\"FLIGHTS\")\n      // socket.onAny((event, ...args) => {\n      //   console.log(`got ${event}`);\n      // });\n      socket.on(\"FLIGHTS\", (payload) => {\n        for (let index = 0; index < payload.length; index++) {\n          payload[index][\"color\"]=getRandomColor();\n          \n        }\n        setFlights(payload)\n});\n      socket.on(\"POSITION\", (payload) => {\n        positions[payload.code] = payload.position\n        setPosition(positions)\n      });\n    },[flights, positions])\n  \n  return (\n    <Container className=\"main-container\">\n      <Row>\n        <Col md=\"8\" sm=\"12\">\n          <Map flights={flights} positions={positions}/>\n        </Col>\n        <Col md=\"4\" sm=\"12\">Chat</Col>\n      </Row>\n      <Row md=\"12\">\n          <h2>Info</h2>\n          {flights.length ? flights.map((flight) => (\n          <Col key={flight.code}>\n            <div>{flight.code}</div>\n            <div>{flight.airline}</div>\n            {/* <div>[{flight.origin}]</div>\n            <div>[{flight.destination}]</div> */}\n            <div>{flight.plane}</div>\n            <div>{flight.seats}</div>\n            {/* <div>{flight.passengers[0].name}</div>    */}\n          </Col>)) : \"\"}\n      </Row>\n\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}