{"version":3,"sources":["services/socket.js","components/Map.js","components/Chat.js","App.js","reportWebVitals.js","index.js"],"names":["socket","io","path","Map","props","useState","positions","setPosition","on","payload","code","position","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","flights","map","flight","Polyline","pathOptions","color","origin","destination","Popup","Marker","Chat","nickname","setNickname","currentText","setCurrentText","chatText","setChatText","name","Date","date","split","message","Row","className","msg","InputGroup","Input","placeholder","onChange","event","target","value","InputGroupAddon","addonType","Button","onClick","emit","App","setFlights","useEffect","index","length","Container","Col","md","sm","airline","plane","seats","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QACaA,EAASC,aAAG,wDAAyD,CAC9EC,KAAM,a,OCEK,SAASC,EAAIC,GAAQ,IAAD,EACEC,mBAAS,IADX,mBACxBC,EADwB,KACbC,EADa,KAW/B,OAPAP,EAAOQ,GAAG,YAAY,SAACC,GACnBH,EAAUG,EAAQC,MAAQD,EAAQE,SAElCJ,EAAYD,MAKZ,8BACI,qBAAKM,GAAG,QAAR,SACI,eAACC,EAAA,EAAD,CAAcC,OAAQ,EAAE,QAAS,OAAQC,KAAM,EAAGC,iBAAiB,EAAnE,UACI,cAACC,EAAA,EAAD,CACAC,YAAY,yEACZC,IAAI,uDAEHf,EAAMgB,QAAQC,KAAI,SAACC,GAAD,OACf,qCAaJ,cAACC,EAAA,EAAD,CAAUC,YAAa,CAACC,MAAOH,EAAOG,OAAQnB,UAAW,CAACgB,EAAOI,OAAQJ,EAAOK,aAAhF,SACI,cAACC,EAAA,EAAD,UAAQN,EAAOZ,SAElBJ,EAAUgB,EAAOZ,OAAU,cAACmB,EAAA,EAAD,CAAgClB,SAAU,CAACL,EAAUgB,EAAOZ,MAAM,GAAGJ,EAAUgB,EAAOZ,MAAM,IAA5F,SACxB,eAACkB,EAAA,EAAD,oCAC2BN,EAAOZ,KAC7BJ,EAAUgB,EAAOZ,MAAOJ,EAAUgB,EAAOZ,MAAMC,SAAU,oBAHzBW,EAAOZ,KAAK,oB,6CCnC1D,SAASoB,EAAK1B,GAAQ,IAAD,EACAC,mBAAS,IADT,mBACzB0B,EADyB,KACfC,EADe,OAEM3B,mBAAS,IAFf,mBAEzB4B,EAFyB,KAEZC,EAFY,OAGA7B,mBAAS,IAHT,mBAGzB8B,EAHyB,KAGfC,EAHe,KAqBhC,OAhBApC,EAAOQ,GAAG,QAAQ,SAACC,GACXA,EAAQ4B,OAAON,EACfK,EAAYD,kBAA4BG,KAAK7B,EAAQ8B,MAAMC,MAAM,OAAO,GAAG,cAAc/B,EAAQgC,QAAQ,YAKzGL,EAAYD,EAAS1B,EAAQ4B,KAAK,cAAcC,KAAK7B,EAAQ8B,MAAMC,MAAM,OAAO,GAAG,cAAc/B,EAAQgC,QAAQ,eAUrH,qCACCV,GAAU,cAACW,EAAA,EAAD,CAAKC,UAAU,cAAf,SACP,8BACGR,EAASK,MAAM,YAAYnB,KAAI,SAACuB,GAAD,OAC5B,qCACA,gCAAMA,EAAIJ,MAAM,eAAe,GAA/B,IAAoCI,EAAIJ,MAAM,eAAe,MAC7D,4BAAII,EAAIJ,MAAM,eAAe,eAMvC,cAACE,EAAA,EAAD,UACA,eAACG,EAAA,EAAD,CAAYF,UAAU,gBAAtB,UACA,cAACG,EAAA,EAAD,CAAOC,YAAahB,EAAW,qBAAuB,mCACtDiB,SAAU,SAACC,GAAD,OAAWf,EAAee,EAAMC,OAAOC,QAAQA,MAAOlB,IAChE,cAACmB,EAAA,EAAD,CAAiBC,UAAU,SAA3B,SACCtB,EACG,cAACuB,EAAA,EAAD,CAAQ7B,MAAM,YAAY8B,QAvBlC,WACIvD,EAAOwD,KAAK,OAAQ,CAACnB,KAAKN,EAAUU,QAASR,IAC7CC,EAAe,KAqBX,kBAIA,cAACoB,EAAA,EAAD,CAAQ7B,MAAM,YAAY8B,QAAS,WAAKvB,EAAYC,GAAaC,EAAe,KAAhF,4B,sBCeGuB,MAvDf,WAAgB,IAAD,EACiBpD,mBAAS,IAD1B,mBACNe,EADM,KACGsC,EADH,KA2Bb,OAhBAC,qBAAU,WACR3D,EAAOwD,KAAK,aACX,CAACpC,IAEJpB,EAAOQ,GAAG,WAAW,SAACC,GACpB,IAAK,IAAImD,EAAQ,EAAGA,EAAQnD,EAAQoD,OAAQD,IAC1CnD,EAAQmD,GAAR,MAAwB,MAG1BF,EAAWjD,MAQX,eAACqD,EAAA,EAAD,CAAWnB,UAAU,iBAArB,UACE,eAACD,EAAA,EAAD,WACE,cAACqB,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,SACE,cAAC9D,EAAD,CAAKH,OAAQA,EAAOoB,QAASA,EAASsC,WAAYA,MAEpD,cAACK,EAAA,EAAD,CAAKC,GAAG,IAAIC,GAAG,KAAf,SACE,cAACnC,EAAD,CAAM9B,OAAQA,SAGlB,eAAC0C,EAAA,EAAD,CAAKsB,GAAG,KAAR,UACI,sCACC5C,EAAQyC,OAASzC,EAAQC,KAAI,SAACC,GAAD,OAC9B,eAACyC,EAAA,EAAD,WACE,8BAAMzC,EAAOZ,OACb,8BAAMY,EAAO4C,UAGb,8BAAM5C,EAAO6C,QACb,8BAAM7C,EAAO8C,UANL9C,EAAOZ,SAQN,UC7CN2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57137c0e.chunk.js","sourcesContent":["import {io} from \"socket.io-client\";\nexport const socket = io(\"wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl\", {\n    path: \"/flights\"});","import React, {useState} from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline} from 'react-leaflet';\nimport {socket} from '../services/socket'\n\nexport default function Map(props) {\n    const [positions, setPosition] = useState({});\n\n\n    socket.on(\"POSITION\", (payload) => {\n        positions[payload.code] = payload.position\n        // console.log(payload.position);\n        setPosition(positions)\n      });\n\n  \n    return (\n        <div>\n            <div id=\"mapid\">\n                <MapContainer center={[-38.505, -65.09]} zoom={5} scrollWheelZoom={false}>\n                    <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {props.flights.map((flight) => ( \n                        <>\n                    {/* <Marker key={flight.code+\"ori\"} position={[flight.origin[0], flight.origin[1]]}>\n                        <Popup>\n                            Origen Vuelo {flight.code}\n                            {positions[flight.code]? positions[flight.code]: \"no hay avance\"}\n                        </Popup>\n                    </Marker> \n                    <Marker key={flight.code+\"dest\"} position={[flight.destination[0], flight.destination[1]]}>\n                        <Popup>\n                            Destino Vuelo {flight.code}\n                            {positions[flight.code]? positions[flight.code].position: \"no hay avance\"}\n                        </Popup>\n                    </Marker>  */}\n                    <Polyline pathOptions={{color: flight.color}} positions={[flight.origin, flight.destination]}>\n                        <Popup>{flight.code}</Popup>\n                    </Polyline>\n                    {positions[flight.code]&&   <Marker key={flight.code+\"loc\"} position={[positions[flight.code][0],positions[flight.code][1]]}>\n                        <Popup>\n                            Posicion actual Vuelo {flight.code}\n                            {positions[flight.code]? positions[flight.code].position: \"no hay avance\"}\n                        </Popup>\n                    </Marker> }\n                    </>))}\n                   \n                </MapContainer>\n            </div>\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport {InputGroupAddon, Row, Button, Input, InputGroup} from 'reactstrap';\nimport {socket} from '../services/socket'\n\n\nexport default function Chat(props) {\n    const [nickname, setNickname] = useState(\"\")\n    const [currentText, setCurrentText] = useState(\"\")\n    const [chatText, setChatText] = useState(\"\")\n\n    socket.on(\"CHAT\", (payload) => {\n        if (payload.name===nickname) {\n            setChatText(chatText+\"yo\"+\"separeichon\"+Date(payload.date).split(\"GMT\")[0]+\"separeichon\"+payload.message+\"qwertyui\")\n            \n            \n        }\n        else{\n            setChatText(chatText+payload.name+\"separeichon\"+Date(payload.date).split(\"GMT\")[0]+\"separeichon\"+payload.message+\"qwertyui\")\n        }\n      });\n    \n\n    function sendMessage() {\n        socket.emit(\"CHAT\", {name:nickname, message: currentText});\n        setCurrentText(\"\")\n    }\n    return (\n        <>\n        {nickname&&<Row className=\"chat-scroll\">\n            <div>\n              {chatText.split(\"qwertyui\").map((msg) => (\n                  <>\n                  <div>{msg.split(\"separeichon\")[0]} {msg.split(\"separeichon\")[1]}</div>\n                  <p>{msg.split(\"separeichon\")[2]}</p>\n                  </>\n\n              ))}\n              </div> \n        </Row>}\n        <Row>\n        <InputGroup className=\"input-group23\">\n        <Input placeholder={nickname ? \"Escribe tu mensaje\" : \"Ingresa tu nickname para chatear\"}\n        onChange={(event) => setCurrentText(event.target.value)} value={currentText}/>\n        <InputGroupAddon addonType=\"append\">\n        {nickname ? \n            <Button color=\"secondary\" onClick={sendMessage}>\n                Send\n            </Button>\n                : \n            <Button color=\"secondary\" onClick={()=>{setNickname(currentText);setCurrentText(\"\")}}>\n                Send\n            </Button>}\n          \n        </InputGroupAddon>\n      </InputGroup>\n        </Row>\n        </>\n    )\n}\n","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Map from './components/Map';\nimport Chat from './components/Chat';\nimport {Container, Row, Col} from 'reactstrap';\nimport {socket} from './services/socket'\n\n\n\nfunction App() {\n  const [flights, setFlights] = useState([]);\n\n  function getRandomColor() {\n      let letters = '0123456789ABCDEF';\n      let color = '#';\n      for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }  \n  useEffect(() => {\n    socket.emit(\"FLIGHTS\")      \n  }, [flights])\n  \n  socket.on(\"FLIGHTS\", (payload) => {\n    for (let index = 0; index < payload.length; index++) {\n      payload[index][\"color\"]=\"red\";\n      \n    }\n    setFlights(payload)\n    });\n  \n  \n  \n\n  \n  return (\n    <Container className=\"main-container\">\n      <Row>\n        <Col md=\"8\" sm=\"12\">\n          <Map socket={socket}flights={flights} setFlights={setFlights}/>\n        </Col>\n        <Col md=\"4\" sm=\"12\" >\n          <Chat socket={socket}/>\n        </Col>\n      </Row>\n      <Row md=\"12\">\n          <h2>Info</h2>\n          {flights.length ? flights.map((flight) => (\n          <Col key={flight.code}>\n            <div>{flight.code}</div>\n            <div>{flight.airline}</div>\n            {/* <div>[{flight.origin}]</div>\n            <div>[{flight.destination}]</div> */}\n            <div>{flight.plane}</div>\n            <div>{flight.seats}</div>\n            {/* <div>{flight.passengers[0].name}</div>    */}\n          </Col>)) : \"\"}\n      </Row>\n\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}